./cvc4_master --bitblast=eager -d cnf <benchmark>.smt2 &> <benchmark>.map
./cvc4_master --bitblast=eager -d sat::minisat <bencmark>.smt2 &> <benchmark>.out

# only run this command once per circuit
# creates a nominal mapping from normalized node names to literals
# don't want that to change between runs
# can't count on unordered data structures to always produce same literals
./cnf.py --cnf-trans --nominal <benchmark>.map litmap

./cnf.py --cnf-trans <benchmark>.map litmap
./cnf.py <benchmark>.out <benchmark>.dimacs

picosat -T <benchmark>.trace <benchmark>.dimacs
tracecheck -B <benchmark>.proof <benchmark.trace>

# running the following produces data in a .arff file
./proc_data.py <benchmark>.proof

# For scikit-learn (which I ended up using)
./learning.py <benchmark>.(trace | proof) <benchmark>.dimacs <model_name>.pkl <Algorithm>

# Then generate clauses with
./clausegen.py <model_name>.pkl <next bound dimacs file> <output file>
